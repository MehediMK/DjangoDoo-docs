{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DjangoDoo - A Modular Django Framework \ud83d\ude80 Welcome to DjangoDoo , an open-source, modular and extensible multipurpose application framework , inspired by Odoo and built using Django . DjangoDoo is designed to provide a flexible and scalable architecture for building business applications, ERP systems, and other enterprise-grade solutions. \ud83c\udf1f Key Features \u2705 Modular System - Install and enable modules dynamically without modifying core code. \u2705 Flexible UI Views - Supports List View, Kanban View, Graph View, and Form View. \u2705 Real-time Updates - OnChange and Compute methods similar to Odoo for real-time calculations. \u2705 Extensible Architecture - Easily add new modules with models, views, templates, and APIs. \u2705 Multi-Tenant Support (Upcoming) - Enable different workspaces for different users. \u2705 User Role Management - Fine-grained access control for different user groups. \u2705 Django ORM & PostgreSQL - Powerful backend with optimized query performance. \u2705 API Ready - RESTful API support using Django REST Framework (DRF). \ud83c\udfaf Why DjangoDoo? DjangoDoo aims to bring the power and flexibility of Odoo to Django-based projects. Instead of building monolithic applications, DjangoDoo allows developers to create modular applications where each feature is a separate module. This approach provides: \ud83d\udd39 Scalability \u2013 Handle large enterprise applications. \ud83d\udd39 Maintainability \u2013 Keep modules independent and reusable. \ud83d\udd39 Customizability \u2013 Easily modify and extend features without breaking the core. \ud83d\ude80 Getting Started Want to set up DjangoDoo? Follow our Getting Started Guide . git clone https://github.com/MehediMK/djangodoo.git cd djangodoo python -m venv venv source venv/bin/activate # On Windows, use venv\\Scripts\\activate pip install -r requirements.txt python manage.py migrate python manage.py runserver For more details, check the Installation Guide . \ud83d\udccc DjangoDoo Architecture DjangoDoo follows a modular architecture where each feature is built as an independent module. \ud83d\udcc2 Project Structure djangodoo/ \u2502\u2500\u2500 djangodoo/ # Core framework functionality \u2502 \u251c\u2500\u2500 ... # All DjangoDoo files exists here. \u2502\u2500\u2500 modules/ # All independent feature modules \u2502 \u251c\u2500\u2500 sales/ # Example module (Sales Management) \u2502 \u251c\u2500\u2500 inventory/ # Example module (Inventory Management) \u2502\u2500\u2500 templates/ # Shared templates for frontend \u2502\u2500\u2500 static/ # Static files (CSS, JS, Images) \u2502\u2500\u2500 api/ # API endpoints for REST support \u2502\u2500\u2500 settings.py # Django settings file \u2502\u2500\u2500 manage.py # Django management script Each module inside modules/ is self-contained , with its own: \ud83d\udccc Models \ud83d\udccc Views \ud83d\udccc Templates \ud83d\udccc URLs \ud83d\udccc API Endpoints To learn more about module development , visit Module Development . \ud83d\udee0 Contributing to DjangoDoo DjangoDoo is an open-source project , and we welcome contributions! \ud83d\udccc How to Contribute? - Check our GitHub Issues for open tasks - Fork the repository and create a feature branch - Submit a Pull Request (PR) for review \ud83d\udc49 Read the Contribution Guide for details. \ud83d\udcac Join the Community \ud83d\udce2 Have questions or feature requests? Join our GitHub Discussions . \ud83d\udd17 GitHub Repository: DjangoDoo on GitHub \ud83d\udd17 Follow on LinkedIn: Project Updates \ud83d\udd17 Join the Discord Community: DjangoDoo Discord \ud83d\ude80 Let's build the next-gen modular Django framework together! \ud83d\ude80 ```","title":"Home"},{"location":"#djangodoo-a-modular-django-framework","text":"Welcome to DjangoDoo , an open-source, modular and extensible multipurpose application framework , inspired by Odoo and built using Django . DjangoDoo is designed to provide a flexible and scalable architecture for building business applications, ERP systems, and other enterprise-grade solutions.","title":"DjangoDoo - A Modular Django Framework \ud83d\ude80"},{"location":"#key-features","text":"\u2705 Modular System - Install and enable modules dynamically without modifying core code. \u2705 Flexible UI Views - Supports List View, Kanban View, Graph View, and Form View. \u2705 Real-time Updates - OnChange and Compute methods similar to Odoo for real-time calculations. \u2705 Extensible Architecture - Easily add new modules with models, views, templates, and APIs. \u2705 Multi-Tenant Support (Upcoming) - Enable different workspaces for different users. \u2705 User Role Management - Fine-grained access control for different user groups. \u2705 Django ORM & PostgreSQL - Powerful backend with optimized query performance. \u2705 API Ready - RESTful API support using Django REST Framework (DRF).","title":"\ud83c\udf1f Key Features"},{"location":"#why-djangodoo","text":"DjangoDoo aims to bring the power and flexibility of Odoo to Django-based projects. Instead of building monolithic applications, DjangoDoo allows developers to create modular applications where each feature is a separate module. This approach provides: \ud83d\udd39 Scalability \u2013 Handle large enterprise applications. \ud83d\udd39 Maintainability \u2013 Keep modules independent and reusable. \ud83d\udd39 Customizability \u2013 Easily modify and extend features without breaking the core.","title":"\ud83c\udfaf Why DjangoDoo?"},{"location":"#getting-started","text":"Want to set up DjangoDoo? Follow our Getting Started Guide . git clone https://github.com/MehediMK/djangodoo.git cd djangodoo python -m venv venv source venv/bin/activate # On Windows, use venv\\Scripts\\activate pip install -r requirements.txt python manage.py migrate python manage.py runserver For more details, check the Installation Guide .","title":"\ud83d\ude80 Getting Started"},{"location":"#djangodoo-architecture","text":"DjangoDoo follows a modular architecture where each feature is built as an independent module. \ud83d\udcc2 Project Structure djangodoo/ \u2502\u2500\u2500 djangodoo/ # Core framework functionality \u2502 \u251c\u2500\u2500 ... # All DjangoDoo files exists here. \u2502\u2500\u2500 modules/ # All independent feature modules \u2502 \u251c\u2500\u2500 sales/ # Example module (Sales Management) \u2502 \u251c\u2500\u2500 inventory/ # Example module (Inventory Management) \u2502\u2500\u2500 templates/ # Shared templates for frontend \u2502\u2500\u2500 static/ # Static files (CSS, JS, Images) \u2502\u2500\u2500 api/ # API endpoints for REST support \u2502\u2500\u2500 settings.py # Django settings file \u2502\u2500\u2500 manage.py # Django management script Each module inside modules/ is self-contained , with its own: \ud83d\udccc Models \ud83d\udccc Views \ud83d\udccc Templates \ud83d\udccc URLs \ud83d\udccc API Endpoints To learn more about module development , visit Module Development .","title":"\ud83d\udccc DjangoDoo Architecture"},{"location":"#contributing-to-djangodoo","text":"DjangoDoo is an open-source project , and we welcome contributions! \ud83d\udccc How to Contribute? - Check our GitHub Issues for open tasks - Fork the repository and create a feature branch - Submit a Pull Request (PR) for review \ud83d\udc49 Read the Contribution Guide for details.","title":"\ud83d\udee0 Contributing to DjangoDoo"},{"location":"#join-the-community","text":"\ud83d\udce2 Have questions or feature requests? Join our GitHub Discussions . \ud83d\udd17 GitHub Repository: DjangoDoo on GitHub \ud83d\udd17 Follow on LinkedIn: Project Updates \ud83d\udd17 Join the Discord Community: DjangoDoo Discord \ud83d\ude80 Let's build the next-gen modular Django framework together! \ud83d\ude80 ```","title":"\ud83d\udcac Join the Community"},{"location":"contributing/","text":"\ud83d\udee0 Contributing to DjangoDoo Welcome to the DjangoDoo project! \ud83d\ude80 We appreciate your interest in contributing to this open-source modular Django framework , inspired by Odoo. Whether you're fixing a bug, adding a feature, or improving documentation, your contribution is valuable. \ud83d\udccc How to Contribute 1\ufe0f\u20e3 Fork the Repository Go to the DjangoDoo GitHub Repository . Click the Fork button (top right). Clone your forked repository locally: git clone https://github.com/YOUR-USERNAME/djangodoo.git cd djangodoo Add the upstream repository: git remote add upstream https://github.com/MehediMK/djangodoo.git 2\ufe0f\u20e3 Set Up the Development Environment Create a virtual environment : python -m venv env source env/bin/activate # For Linux/macOS env\\Scripts\\activate # For Windows Install dependencies : pip install -r requirements.txt Apply migrations : python manage.py migrate Run the development server : python manage.py runserver 3\ufe0f\u20e3 Pick an Issue & Work on It \ud83d\udd39 Check GitHub Issues for open tasks. \ud83d\udd39 Comment on an issue before starting to avoid duplication. \ud83d\udd39 Create a new branch for your contribution: git checkout -b feature-branch-name \ud83d\udd39 After making changes, test your code and commit: git add . git commit -m \"\u2728 Added new feature: [Feature Name]\" git push origin feature-branch-name 4\ufe0f\u20e3 Submit a Pull Request (PR) Once your changes are ready: 1. Go to GitHub and open a Pull Request (PR) . 2. Provide a clear title & description of your changes. 3. Wait for a review from maintainers. \ud83d\udccb Code Guidelines \u2714 Follow PEP8 coding standards. \u2714 Use descriptive commit messages (e.g., \"\ud83d\udc1b Fixed bug in module loader\" ). \u2714 Write unit tests for new features ( tests/ directory). \u2714 Use black for code formatting: black . \u2714 Run pre-commit checks before pushing: pre-commit run --all-files \ud83d\udce2 How to Report Issues If you find a bug or have a feature request: \ud83d\udd39 Go to GitHub Issues . \ud83d\udd39 Click \"New Issue\" and choose Bug Report or Feature Request . \ud83d\udd39 Provide clear details with screenshots (if applicable). \ud83d\udca1 Ways to Contribute \ud83d\ude80 Code Contributions \u2013 Fix bugs, build new features \ud83d\udcd6 Documentation \u2013 Improve project documentation \ud83d\udc1b Bug Reports \u2013 Report and debug issues \ud83c\udf1f Spread the Word \u2013 Share DjangoDoo on LinkedIn, Twitter, or blogs \ud83e\udd1d Community & Support \ud83d\udd39 GitHub Discussions \u2013 Ask questions & share ideas \ud83d\udd39 Discord Community \u2013 Join our dev team (link coming soon) \ud83d\udd39 Twitter/LinkedIn \u2013 Tag us when sharing updates \u2764\ufe0f Thank You! Your contributions make DjangoDoo better every day! \ud83c\udf1f Happy Coding! \ud83d\ude80","title":"Contributing"},{"location":"contributing/#contributing-to-djangodoo","text":"Welcome to the DjangoDoo project! \ud83d\ude80 We appreciate your interest in contributing to this open-source modular Django framework , inspired by Odoo. Whether you're fixing a bug, adding a feature, or improving documentation, your contribution is valuable.","title":"\ud83d\udee0 Contributing to DjangoDoo"},{"location":"contributing/#how-to-contribute","text":"","title":"\ud83d\udccc How to Contribute"},{"location":"contributing/#1-fork-the-repository","text":"Go to the DjangoDoo GitHub Repository . Click the Fork button (top right). Clone your forked repository locally: git clone https://github.com/YOUR-USERNAME/djangodoo.git cd djangodoo Add the upstream repository: git remote add upstream https://github.com/MehediMK/djangodoo.git","title":"1\ufe0f\u20e3 Fork the Repository"},{"location":"contributing/#2-set-up-the-development-environment","text":"Create a virtual environment : python -m venv env source env/bin/activate # For Linux/macOS env\\Scripts\\activate # For Windows Install dependencies : pip install -r requirements.txt Apply migrations : python manage.py migrate Run the development server : python manage.py runserver","title":"2\ufe0f\u20e3 Set Up the Development Environment"},{"location":"contributing/#3-pick-an-issue-work-on-it","text":"\ud83d\udd39 Check GitHub Issues for open tasks. \ud83d\udd39 Comment on an issue before starting to avoid duplication. \ud83d\udd39 Create a new branch for your contribution: git checkout -b feature-branch-name \ud83d\udd39 After making changes, test your code and commit: git add . git commit -m \"\u2728 Added new feature: [Feature Name]\" git push origin feature-branch-name","title":"3\ufe0f\u20e3 Pick an Issue &amp; Work on It"},{"location":"contributing/#4-submit-a-pull-request-pr","text":"Once your changes are ready: 1. Go to GitHub and open a Pull Request (PR) . 2. Provide a clear title & description of your changes. 3. Wait for a review from maintainers.","title":"4\ufe0f\u20e3 Submit a Pull Request (PR)"},{"location":"contributing/#code-guidelines","text":"\u2714 Follow PEP8 coding standards. \u2714 Use descriptive commit messages (e.g., \"\ud83d\udc1b Fixed bug in module loader\" ). \u2714 Write unit tests for new features ( tests/ directory). \u2714 Use black for code formatting: black . \u2714 Run pre-commit checks before pushing: pre-commit run --all-files","title":"\ud83d\udccb Code Guidelines"},{"location":"contributing/#how-to-report-issues","text":"If you find a bug or have a feature request: \ud83d\udd39 Go to GitHub Issues . \ud83d\udd39 Click \"New Issue\" and choose Bug Report or Feature Request . \ud83d\udd39 Provide clear details with screenshots (if applicable).","title":"\ud83d\udce2 How to Report Issues"},{"location":"contributing/#ways-to-contribute","text":"\ud83d\ude80 Code Contributions \u2013 Fix bugs, build new features \ud83d\udcd6 Documentation \u2013 Improve project documentation \ud83d\udc1b Bug Reports \u2013 Report and debug issues \ud83c\udf1f Spread the Word \u2013 Share DjangoDoo on LinkedIn, Twitter, or blogs","title":"\ud83d\udca1 Ways to Contribute"},{"location":"contributing/#community-support","text":"\ud83d\udd39 GitHub Discussions \u2013 Ask questions & share ideas \ud83d\udd39 Discord Community \u2013 Join our dev team (link coming soon) \ud83d\udd39 Twitter/LinkedIn \u2013 Tag us when sharing updates","title":"\ud83e\udd1d Community &amp; Support"},{"location":"contributing/#thank-you","text":"Your contributions make DjangoDoo better every day! \ud83c\udf1f Happy Coding! \ud83d\ude80","title":"\u2764\ufe0f Thank You!"},{"location":"faq/","text":"\u2753 Frequently Asked Questions (FAQ) Welcome to the DjangoDoo FAQ! Here you'll find answers to common questions about DjangoDoo, its features, and how to contribute. \ud83d\udccc General Questions 1\ufe0f\u20e3 What is DjangoDoo? DjangoDoo is a modular, extensible application framework built using Django , inspired by Odoo 17 . It allows developers to build multi-purpose applications with features like list views, kanban views, graph views, form views, and real-time onchange/compute methods . 2\ufe0f\u20e3 Is DjangoDoo a clone of Odoo? No. While DjangoDoo follows a modular architecture similar to Odoo, it is built entirely in Django and designed to be a lightweight alternative with more flexibility. 3\ufe0f\u20e3 Who is DjangoDoo for? DjangoDoo is ideal for: \u2714 Developers building modular applications. \u2714 Startups & Enterprises looking for an Odoo-like framework using Django. \u2714 Open-source contributors interested in improving Django-based projects. \u2699\ufe0f Installation & Setup 4\ufe0f\u20e3 How do I install DjangoDoo? You can set up DjangoDoo using the following steps: git clone https://github.com/MehediMK/djangodoo.git cd djangodoo python -m venv env source env/bin/activate # For macOS/Linux env\\Scripts\\activate # For Windows pip install -r requirements.txt python manage.py migrate python manage.py runserver 5\ufe0f\u20e3 What are the system requirements? \u2714 Python 3.10+ \u2714 Django 4.x \u2714 PostgreSQL or SQLite (default: SQLite) \u2714 Linux/macOS/Windows \ud83d\udee0 Features & Modules 6\ufe0f\u20e3 What features does DjangoDoo offer? \ud83d\ude80 Modular App System \u2013 Independent modules like Odoo \ud83d\udcca List, Kanban, Graph, Form Views \u2013 Dynamic UI rendering \ud83d\udd04 Real-time onchange/compute methods \u2013 Like Odoo \ud83d\udd0c Plugin Support \u2013 Easily extend functionality \ud83d\udcc2 Multi-Database Support \u2013 Works with PostgreSQL, SQLite 7\ufe0f\u20e3 How do I create a new module in DjangoDoo? You can create a module using the following command: python manage.py startapp my_module Then, add it to INSTALLED_APPS in settings.py . \ud83e\udd1d Contribution & Support 8\ufe0f\u20e3 How can I contribute? You can contribute by: \u2714 Fixing Bugs \u2013 Check the Issues tab \u2714 Adding Features \u2013 Pick a feature from the roadmap \u2714 Improving Docs \u2013 Submit PRs for better documentation \u2714 Spreading the Word \u2013 Share DjangoDoo on social media Check out the Contributing Guide for details. 9\ufe0f\u20e3 Where can I report issues? If you encounter any bugs or have feature requests, please open an issue on GitHub Issues . \ud83d\ude80 Future Roadmap \ud83d\udd1f What features are planned for future releases? \ud83d\udee0 Role-Based Access Control (RBAC) \ud83d\udccc Dynamic Module Installer \ud83d\udcca Dashboard Widgets \ud83d\udd04 WebSockets for real-time updates \ud83c\udf10 REST API for module interaction \ud83d\udce2 Community & Contact 1\ufe0f\u20e31\ufe0f\u20e3 Where can I discuss DjangoDoo? \ud83d\udcac Join our GitHub Discussions (coming soon) \ud83d\udc26 Follow updates on Twitter & LinkedIn \ud83d\udce7 Contact the maintainers via GitHub \u2764\ufe0f Thanks for Your Support! If you like DjangoDoo, don't forget to \u2b50 star the repository on GitHub!","title":"FAQ"},{"location":"faq/#frequently-asked-questions-faq","text":"Welcome to the DjangoDoo FAQ! Here you'll find answers to common questions about DjangoDoo, its features, and how to contribute.","title":"\u2753 Frequently Asked Questions (FAQ)"},{"location":"faq/#general-questions","text":"","title":"\ud83d\udccc General Questions"},{"location":"faq/#1-what-is-djangodoo","text":"DjangoDoo is a modular, extensible application framework built using Django , inspired by Odoo 17 . It allows developers to build multi-purpose applications with features like list views, kanban views, graph views, form views, and real-time onchange/compute methods .","title":"1\ufe0f\u20e3 What is DjangoDoo?"},{"location":"faq/#2-is-djangodoo-a-clone-of-odoo","text":"No. While DjangoDoo follows a modular architecture similar to Odoo, it is built entirely in Django and designed to be a lightweight alternative with more flexibility.","title":"2\ufe0f\u20e3 Is DjangoDoo a clone of Odoo?"},{"location":"faq/#3-who-is-djangodoo-for","text":"DjangoDoo is ideal for: \u2714 Developers building modular applications. \u2714 Startups & Enterprises looking for an Odoo-like framework using Django. \u2714 Open-source contributors interested in improving Django-based projects.","title":"3\ufe0f\u20e3 Who is DjangoDoo for?"},{"location":"faq/#installation-setup","text":"","title":"\u2699\ufe0f Installation &amp; Setup"},{"location":"faq/#4-how-do-i-install-djangodoo","text":"You can set up DjangoDoo using the following steps: git clone https://github.com/MehediMK/djangodoo.git cd djangodoo python -m venv env source env/bin/activate # For macOS/Linux env\\Scripts\\activate # For Windows pip install -r requirements.txt python manage.py migrate python manage.py runserver","title":"4\ufe0f\u20e3 How do I install DjangoDoo?"},{"location":"faq/#5-what-are-the-system-requirements","text":"\u2714 Python 3.10+ \u2714 Django 4.x \u2714 PostgreSQL or SQLite (default: SQLite) \u2714 Linux/macOS/Windows","title":"5\ufe0f\u20e3 What are the system requirements?"},{"location":"faq/#features-modules","text":"","title":"\ud83d\udee0 Features &amp; Modules"},{"location":"faq/#6-what-features-does-djangodoo-offer","text":"\ud83d\ude80 Modular App System \u2013 Independent modules like Odoo \ud83d\udcca List, Kanban, Graph, Form Views \u2013 Dynamic UI rendering \ud83d\udd04 Real-time onchange/compute methods \u2013 Like Odoo \ud83d\udd0c Plugin Support \u2013 Easily extend functionality \ud83d\udcc2 Multi-Database Support \u2013 Works with PostgreSQL, SQLite","title":"6\ufe0f\u20e3 What features does DjangoDoo offer?"},{"location":"faq/#7-how-do-i-create-a-new-module-in-djangodoo","text":"You can create a module using the following command: python manage.py startapp my_module Then, add it to INSTALLED_APPS in settings.py .","title":"7\ufe0f\u20e3 How do I create a new module in DjangoDoo?"},{"location":"faq/#contribution-support","text":"","title":"\ud83e\udd1d Contribution &amp; Support"},{"location":"faq/#8-how-can-i-contribute","text":"You can contribute by: \u2714 Fixing Bugs \u2013 Check the Issues tab \u2714 Adding Features \u2013 Pick a feature from the roadmap \u2714 Improving Docs \u2013 Submit PRs for better documentation \u2714 Spreading the Word \u2013 Share DjangoDoo on social media Check out the Contributing Guide for details.","title":"8\ufe0f\u20e3 How can I contribute?"},{"location":"faq/#9-where-can-i-report-issues","text":"If you encounter any bugs or have feature requests, please open an issue on GitHub Issues .","title":"9\ufe0f\u20e3 Where can I report issues?"},{"location":"faq/#future-roadmap","text":"","title":"\ud83d\ude80 Future Roadmap"},{"location":"faq/#what-features-are-planned-for-future-releases","text":"\ud83d\udee0 Role-Based Access Control (RBAC) \ud83d\udccc Dynamic Module Installer \ud83d\udcca Dashboard Widgets \ud83d\udd04 WebSockets for real-time updates \ud83c\udf10 REST API for module interaction","title":"\ud83d\udd1f What features are planned for future releases?"},{"location":"faq/#community-contact","text":"","title":"\ud83d\udce2 Community &amp; Contact"},{"location":"faq/#11-where-can-i-discuss-djangodoo","text":"\ud83d\udcac Join our GitHub Discussions (coming soon) \ud83d\udc26 Follow updates on Twitter & LinkedIn \ud83d\udce7 Contact the maintainers via GitHub","title":"1\ufe0f\u20e31\ufe0f\u20e3 Where can I discuss DjangoDoo?"},{"location":"faq/#thanks-for-your-support","text":"If you like DjangoDoo, don't forget to \u2b50 star the repository on GitHub!","title":"\u2764\ufe0f Thanks for Your Support!"},{"location":"getting-started/","text":"\ud83d\ude80 Getting Started with DjangoDoo Welcome to DjangoDoo , an open-source modular application framework built using Django, inspired by Odoo 17. This guide will help you set up DjangoDoo on your local machine and get started with development. \ud83d\udd25 Prerequisites Before you start, ensure you have the following installed on your system: \u2705 Python 3.10+ - Download Python \u2705 Git - Download Git \u2705 PostgreSQL (Recommended) - Download PostgreSQL \u2705 Virtual Environment (venv) - Built into Python \u2705 Django & Dependencies - Installed via pip \ud83d\udce5 Step 1: Clone the Repository First, clone the DjangoDoo repository from GitHub: git clone https://github.com/MehediMK/djangodoo.git cd djangodoo \ud83c\udfd7 Step 2: Set Up a Virtual Environment Create a virtual environment to manage dependencies: python -m venv venv Activate the virtual environment: # On macOS/Linux source venv/bin/activate # On Windows venv\\Scripts\\activate \ud83d\udce6 Step 3: Install Dependencies Install all required packages using pip : pip install -r requirements.txt Ensure that Django is installed: python -m django --version \ud83d\udee0 Step 4: Configure the Database By default, DjangoDoo uses SQLite , but for production, PostgreSQL is recommended. Using SQLite (Default) No additional configuration is required. Using PostgreSQL Create a PostgreSQL database: sql CREATE DATABASE djangodoo; Update settings.py to configure PostgreSQL: DATABASES = { 'default': { 'ENGINE': 'django.db.backends.postgresql', 'NAME': 'djangodoo', 'USER': 'your_username', 'PASSWORD': 'your_password', 'HOST': 'localhost', 'PORT': '5432', } } \ud83d\udd04 Step 5: Run Migrations Apply database migrations: python manage.py migrate If using PostgreSQL, ensure you have created the database before running this command. \ud83d\ude80 Step 6: Start the Development Server Run the Django server: python manage.py runserver By default, the server starts at http://127.0.0.1:8000/ . Open it in your browser to verify the setup. \ud83d\udd11 Step 7: Create a Superuser To access the Django Admin Panel , create a superuser: python manage.py createsuperuser Follow the prompts to set up an admin username and password. Once done, visit http://127.0.0.1:8000/admin/ and log in. \ud83c\udfaf Step 8: Understanding the Project Structure DjangoDoo follows a modular structure where each feature is an independent module. djangodoo/ \u2502\u2500\u2500 djangodoo/ # Core framework functionality \u2502 \u251c\u2500\u2500 ... # All DjangoDoo files exists here. \u2502\u2500\u2500 modules/ # All independent feature modules \u2502 \u251c\u2500\u2500 sales/ # Example module (Sales Management) \u2502 \u251c\u2500\u2500 inventory/ # Example module (Inventory Management) \u2502\u2500\u2500 templates/ # Shared templates for frontend \u2502\u2500\u2500 static/ # Static files (CSS, JS, Images) \u2502\u2500\u2500 api/ # API endpoints for REST support \u2502\u2500\u2500 settings.py # Django settings file \u2502\u2500\u2500 manage.py # Django management script Each module inside modules/ is self-contained , with its own models, views, templates, and API endpoints. \ud83d\udee0 Step 9: Running Tests To ensure everything is working properly, run the test suite: python manage.py test \ud83d\udd27 Step 10: Running Celery for Asynchronous Tasks (Optional) If the project requires asynchronous task processing with Celery , start the Celery worker: celery -A djangodoo worker --loglevel=info \ud83c\udf1f Next Steps Now that DjangoDoo is set up, explore its features: \ud83d\udccc Creating a New Module \ud83d\udccc Understanding Views & Models \ud83d\udccc Using APIs \u2753 Need Help? For support, check our GitHub Discussions or join the DjangoDoo Community . \ud83d\udd17 GitHub: DjangoDoo Repository \ud83d\udd17 Join Discord: DjangoDoo Community \ud83d\ude80 Happy Coding with DjangoDoo ! \ud83d\ude80","title":"Getting Started"},{"location":"getting-started/#getting-started-with-djangodoo","text":"Welcome to DjangoDoo , an open-source modular application framework built using Django, inspired by Odoo 17. This guide will help you set up DjangoDoo on your local machine and get started with development.","title":"\ud83d\ude80 Getting Started with DjangoDoo"},{"location":"getting-started/#prerequisites","text":"Before you start, ensure you have the following installed on your system: \u2705 Python 3.10+ - Download Python \u2705 Git - Download Git \u2705 PostgreSQL (Recommended) - Download PostgreSQL \u2705 Virtual Environment (venv) - Built into Python \u2705 Django & Dependencies - Installed via pip","title":"\ud83d\udd25 Prerequisites"},{"location":"getting-started/#step-1-clone-the-repository","text":"First, clone the DjangoDoo repository from GitHub: git clone https://github.com/MehediMK/djangodoo.git cd djangodoo","title":"\ud83d\udce5 Step 1: Clone the Repository"},{"location":"getting-started/#step-2-set-up-a-virtual-environment","text":"Create a virtual environment to manage dependencies: python -m venv venv Activate the virtual environment: # On macOS/Linux source venv/bin/activate # On Windows venv\\Scripts\\activate","title":"\ud83c\udfd7 Step 2: Set Up a Virtual Environment"},{"location":"getting-started/#step-3-install-dependencies","text":"Install all required packages using pip : pip install -r requirements.txt Ensure that Django is installed: python -m django --version","title":"\ud83d\udce6 Step 3: Install Dependencies"},{"location":"getting-started/#step-4-configure-the-database","text":"By default, DjangoDoo uses SQLite , but for production, PostgreSQL is recommended.","title":"\ud83d\udee0 Step 4: Configure the Database"},{"location":"getting-started/#using-sqlite-default","text":"No additional configuration is required.","title":"Using SQLite (Default)"},{"location":"getting-started/#using-postgresql","text":"Create a PostgreSQL database: sql CREATE DATABASE djangodoo; Update settings.py to configure PostgreSQL: DATABASES = { 'default': { 'ENGINE': 'django.db.backends.postgresql', 'NAME': 'djangodoo', 'USER': 'your_username', 'PASSWORD': 'your_password', 'HOST': 'localhost', 'PORT': '5432', } }","title":"Using PostgreSQL"},{"location":"getting-started/#step-5-run-migrations","text":"Apply database migrations: python manage.py migrate If using PostgreSQL, ensure you have created the database before running this command.","title":"\ud83d\udd04 Step 5: Run Migrations"},{"location":"getting-started/#step-6-start-the-development-server","text":"Run the Django server: python manage.py runserver By default, the server starts at http://127.0.0.1:8000/ . Open it in your browser to verify the setup.","title":"\ud83d\ude80 Step 6: Start the Development Server"},{"location":"getting-started/#step-7-create-a-superuser","text":"To access the Django Admin Panel , create a superuser: python manage.py createsuperuser Follow the prompts to set up an admin username and password. Once done, visit http://127.0.0.1:8000/admin/ and log in.","title":"\ud83d\udd11 Step 7: Create a Superuser"},{"location":"getting-started/#step-8-understanding-the-project-structure","text":"DjangoDoo follows a modular structure where each feature is an independent module. djangodoo/ \u2502\u2500\u2500 djangodoo/ # Core framework functionality \u2502 \u251c\u2500\u2500 ... # All DjangoDoo files exists here. \u2502\u2500\u2500 modules/ # All independent feature modules \u2502 \u251c\u2500\u2500 sales/ # Example module (Sales Management) \u2502 \u251c\u2500\u2500 inventory/ # Example module (Inventory Management) \u2502\u2500\u2500 templates/ # Shared templates for frontend \u2502\u2500\u2500 static/ # Static files (CSS, JS, Images) \u2502\u2500\u2500 api/ # API endpoints for REST support \u2502\u2500\u2500 settings.py # Django settings file \u2502\u2500\u2500 manage.py # Django management script Each module inside modules/ is self-contained , with its own models, views, templates, and API endpoints.","title":"\ud83c\udfaf Step 8: Understanding the Project Structure"},{"location":"getting-started/#step-9-running-tests","text":"To ensure everything is working properly, run the test suite: python manage.py test","title":"\ud83d\udee0 Step 9: Running Tests"},{"location":"getting-started/#step-10-running-celery-for-asynchronous-tasks-optional","text":"If the project requires asynchronous task processing with Celery , start the Celery worker: celery -A djangodoo worker --loglevel=info","title":"\ud83d\udd27 Step 10: Running Celery for Asynchronous Tasks (Optional)"},{"location":"getting-started/#next-steps","text":"Now that DjangoDoo is set up, explore its features: \ud83d\udccc Creating a New Module \ud83d\udccc Understanding Views & Models \ud83d\udccc Using APIs","title":"\ud83c\udf1f Next Steps"},{"location":"getting-started/#need-help","text":"For support, check our GitHub Discussions or join the DjangoDoo Community . \ud83d\udd17 GitHub: DjangoDoo Repository \ud83d\udd17 Join Discord: DjangoDoo Community","title":"\u2753 Need Help?"},{"location":"getting-started/#happy-coding-with-djangodoo","text":"","title":"\ud83d\ude80 Happy Coding with DjangoDoo! \ud83d\ude80"},{"location":"modules/","text":"\ud83d\udce6 DjangoDoo Modules Guide DjangoDoo is a modular framework built using Django, allowing you to create independent feature modules similar to Odoo. Each module has its own models, views, templates, and API endpoints while seamlessly integrating into the core system. \ud83d\ude80 What is a Module? A module in DjangoDoo is a self-contained application that extends the core functionality. It can be enabled or disabled dynamically without affecting the entire system. Each module can include: \u2714 Models \u2013 Define database tables \u2714 Views \u2013 Handle HTTP requests \u2714 Templates \u2013 Frontend HTML pages \u2714 Static Files \u2013 CSS, JS, images \u2714 API Endpoints \u2013 RESTful APIs (optional) \ud83d\udcc2 Module Directory Structure Each module is stored inside the modules/ directory: djangodoo/ \u2502\u2500\u2500 djangodoo/ # Core framework functionality \u2502 \u251c\u2500\u2500 ... # All DjangoDoo files exists here. \u2502\u2500\u2500 \u251c\u2500\u2500 settings.py # Django settings file \u2502\u2500\u2500 modules/ # All independent feature modules \u2502 \u251c\u2500\u2500 sales/ # Example module (Sales Management) \u2502 \u2502 \u251c\u2500\u2500 models.py # Database models \u2502 \u2502 \u251c\u2500\u2500 views.py # Business logic & controllers \u2502 \u2502 \u251c\u2500\u2500 urls.py # URL routing \u2502 \u2502 \u251c\u2500\u2500 templates/sales/ # Frontend templates \u2502 \u2502 \u251c\u2500\u2500 static/sales/ # Static assets (CSS, JS, images) \u2502 \u2502 \u251c\u2500\u2500 api.py # REST API endpoints (optional) \u2502 \u2502 \u251c\u2500\u2500 __init__.py # Module initialization \u2502 \u2502 \u251c\u2500\u2500 admin.py # Django Admin integration \u2502 \u2502 \u251c\u2500\u2500 forms.py # Django Forms (if needed) \u2502 \u2502 \u251c\u2500\u2500 tests.py # Unit tests for the module \u2502\u2500\u2500 manage.py # Django management script \ud83d\udd28 How to Create a New Module Step 1: Create a Module Directory Navigate to the modules/ directory and create a new module: cd modules/ mkdir inventory cd inventory touch __init__.py models.py views.py urls.py api.py admin.py forms.py tests.py mkdir templates/inventory static/inventory Step 2: Define Models ( models.py ) Create your database models inside models.py : from django.db import models class Product(models.Model): name = models.CharField(max_length=255) price = models.DecimalField(max_digits=10, decimal_places=2) stock = models.IntegerField() def __str__(self): return self.name Run migrations to apply database changes: python manage.py makemigrations inventory python manage.py migrate Step 3: Create Views ( views.py ) Define business logic and render templates: from django.shortcuts import render from .models import Product def product_list(request): products = Product.objects.all() return render(request, \"inventory/product_list.html\", {\"products\": products}) Step 4: Define URL Routing ( urls.py ) Connect your views to Django\u2019s URL system: from django.urls import path from .views import product_list urlpatterns = [ path('products/', product_list, name=\"product_list\"), ] Include this module in the project's main urls.py : from django.urls import include, path urlpatterns = [ path('inventory/', include('modules.inventory.urls')), ] Step 5: Create Templates ( templates/inventory/product_list.html ) Define an HTML template for the module: {% extends 'base.html' %} {% block content %} <h1>Product List</h1> <ul> {% for product in products %} <li>{{ product.name }} - ${{ product.price }}</li> {% endfor %} </ul> {% endblock %} Step 6: Register the Module in Django Admin ( admin.py ) from django.contrib import admin from .models import Product admin.site.register(Product) Now, run the Django development server: python manage.py runserver Visit http://127.0.0.1:8000/inventory/products/ to see the module in action. \ud83d\udee0 Dynamic Module Loading DjangoDoo supports dynamic module activation/deactivation . To register a new module, add it to INSTALLED_APPS dynamically in settings.py : import os INSTALLED_APPS += [ app for app in os.listdir(\"modules\") if os.path.isdir(os.path.join(\"modules\", app)) ] This ensures that any new module added to modules/ is automatically loaded . \ud83d\udce2 Next Steps \ud83d\udccc Understanding Views & Models \ud83d\udccc Working with Graph & Kanban Views For more details, check our GitHub Repository . \ud83d\ude80 \ud83d\udd17 GitHub: DjangoDoo Repository \ud83d\udd17 Join Discord: DjangoDoo Community","title":"Modules Guide"},{"location":"modules/#djangodoo-modules-guide","text":"DjangoDoo is a modular framework built using Django, allowing you to create independent feature modules similar to Odoo. Each module has its own models, views, templates, and API endpoints while seamlessly integrating into the core system.","title":"\ud83d\udce6 DjangoDoo Modules Guide"},{"location":"modules/#what-is-a-module","text":"A module in DjangoDoo is a self-contained application that extends the core functionality. It can be enabled or disabled dynamically without affecting the entire system. Each module can include: \u2714 Models \u2013 Define database tables \u2714 Views \u2013 Handle HTTP requests \u2714 Templates \u2013 Frontend HTML pages \u2714 Static Files \u2013 CSS, JS, images \u2714 API Endpoints \u2013 RESTful APIs (optional)","title":"\ud83d\ude80 What is a Module?"},{"location":"modules/#module-directory-structure","text":"Each module is stored inside the modules/ directory: djangodoo/ \u2502\u2500\u2500 djangodoo/ # Core framework functionality \u2502 \u251c\u2500\u2500 ... # All DjangoDoo files exists here. \u2502\u2500\u2500 \u251c\u2500\u2500 settings.py # Django settings file \u2502\u2500\u2500 modules/ # All independent feature modules \u2502 \u251c\u2500\u2500 sales/ # Example module (Sales Management) \u2502 \u2502 \u251c\u2500\u2500 models.py # Database models \u2502 \u2502 \u251c\u2500\u2500 views.py # Business logic & controllers \u2502 \u2502 \u251c\u2500\u2500 urls.py # URL routing \u2502 \u2502 \u251c\u2500\u2500 templates/sales/ # Frontend templates \u2502 \u2502 \u251c\u2500\u2500 static/sales/ # Static assets (CSS, JS, images) \u2502 \u2502 \u251c\u2500\u2500 api.py # REST API endpoints (optional) \u2502 \u2502 \u251c\u2500\u2500 __init__.py # Module initialization \u2502 \u2502 \u251c\u2500\u2500 admin.py # Django Admin integration \u2502 \u2502 \u251c\u2500\u2500 forms.py # Django Forms (if needed) \u2502 \u2502 \u251c\u2500\u2500 tests.py # Unit tests for the module \u2502\u2500\u2500 manage.py # Django management script","title":"\ud83d\udcc2 Module Directory Structure"},{"location":"modules/#how-to-create-a-new-module","text":"","title":"\ud83d\udd28 How to Create a New Module"},{"location":"modules/#step-1-create-a-module-directory","text":"Navigate to the modules/ directory and create a new module: cd modules/ mkdir inventory cd inventory touch __init__.py models.py views.py urls.py api.py admin.py forms.py tests.py mkdir templates/inventory static/inventory","title":"Step 1: Create a Module Directory"},{"location":"modules/#step-2-define-models-modelspy","text":"Create your database models inside models.py : from django.db import models class Product(models.Model): name = models.CharField(max_length=255) price = models.DecimalField(max_digits=10, decimal_places=2) stock = models.IntegerField() def __str__(self): return self.name Run migrations to apply database changes: python manage.py makemigrations inventory python manage.py migrate","title":"Step 2: Define Models (models.py)"},{"location":"modules/#step-3-create-views-viewspy","text":"Define business logic and render templates: from django.shortcuts import render from .models import Product def product_list(request): products = Product.objects.all() return render(request, \"inventory/product_list.html\", {\"products\": products})","title":"Step 3: Create Views (views.py)"},{"location":"modules/#step-4-define-url-routing-urlspy","text":"Connect your views to Django\u2019s URL system: from django.urls import path from .views import product_list urlpatterns = [ path('products/', product_list, name=\"product_list\"), ] Include this module in the project's main urls.py : from django.urls import include, path urlpatterns = [ path('inventory/', include('modules.inventory.urls')), ]","title":"Step 4: Define URL Routing (urls.py)"},{"location":"modules/#step-5-create-templates-templatesinventoryproduct_listhtml","text":"Define an HTML template for the module: {% extends 'base.html' %} {% block content %} <h1>Product List</h1> <ul> {% for product in products %} <li>{{ product.name }} - ${{ product.price }}</li> {% endfor %} </ul> {% endblock %}","title":"Step 5: Create Templates (templates/inventory/product_list.html)"},{"location":"modules/#step-6-register-the-module-in-django-admin-adminpy","text":"from django.contrib import admin from .models import Product admin.site.register(Product) Now, run the Django development server: python manage.py runserver Visit http://127.0.0.1:8000/inventory/products/ to see the module in action.","title":"Step 6: Register the Module in Django Admin (admin.py)"},{"location":"modules/#dynamic-module-loading","text":"DjangoDoo supports dynamic module activation/deactivation . To register a new module, add it to INSTALLED_APPS dynamically in settings.py : import os INSTALLED_APPS += [ app for app in os.listdir(\"modules\") if os.path.isdir(os.path.join(\"modules\", app)) ] This ensures that any new module added to modules/ is automatically loaded .","title":"\ud83d\udee0 Dynamic Module Loading"},{"location":"modules/#next-steps","text":"\ud83d\udccc Understanding Views & Models \ud83d\udccc Working with Graph & Kanban Views For more details, check our GitHub Repository . \ud83d\ude80 \ud83d\udd17 GitHub: DjangoDoo Repository \ud83d\udd17 Join Discord: DjangoDoo Community","title":"\ud83d\udce2 Next Steps"}]}